{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.18","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"tpu1vmV38","dataSources":[{"sourceId":105399,"databundleVersionId":12733338,"isSourceIdPinned":false,"sourceType":"competition"},{"sourceId":12700104,"sourceType":"datasetVersion","datasetId":7902293}],"dockerImageVersionId":31091,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport os\nfrom tqdm import tqdm\n\n# ---------------------------\n# Configuration\n# ---------------------------\nCONFIG = {\n    'data_paths': {\n        'competition': '/kaggle/input/aeroclub-recsys-2025/',\n        'submissions': '/kaggle/input/20-juli-2025-flightrank/',\n        'output': '/kaggle/working/'\n    },\n    'top_submissions': [\n        ('0.49343.csv', 0.40),  # XGBoost Ranker + Rule-based Rerank\n        ('0.48425.csv', 0.35),  # Simple Ensemble\n        ('0.49068.csv', 0.20),  # High scoring submission\n        ('0.43916.csv', 0.05)   # CatBoost baseline for diversity\n    ],\n    'final_blend_weights': [0.997, 0.001, 0.001, 0.001]\n}\n\n# ---------------------------\n# Helper Functions\n# ---------------------------\n\ndef safe_load_submission(path, file):\n    \"\"\"Safely load a submission file with validation\"\"\"\n    full_path = os.path.join(path, f\"submission {file}\" if ' ' not in file else file)\n    if not os.path.exists(full_path):\n        print(f\"Warning: Submission not found - {file}\")\n        return None\n    try:\n        df = pd.read_csv(full_path)\n        if not all(col in df.columns for col in ['Id', 'ranker_id', 'selected']):\n            print(f\"Warning: Invalid columns in {file}\")\n            return None\n        return df\n    except Exception as e:\n        print(f\"Error loading {file}: {str(e)}\")\n        return None\n\ndef rank_to_score(rank_series, eps=1e-6):\n    \"\"\"Convert ranks to normalized scores (1 = best rank)\"\"\"\n    max_rank = rank_series.max()\n    return 1.0 - (rank_series - 1) / (max_rank + eps)\n\ndef score_to_rank(score_series):\n    \"\"\"Convert scores back to ranks (1 = best score)\"\"\"\n    return score_series.rank(method='first', ascending=False).astype(int)\n\n# ---------------------------\n# Advanced Ensemble Logic\n# ---------------------------\n\ndef create_hybrid_ensemble(submissions_with_weights):\n    \"\"\"\n    Create hybrid ensemble of multiple submissions with weighted blending\n    submissions_with_weights: List of tuples (filename, weight)\n    \"\"\"\n    # Load all available submissions\n    loaded_subs = []\n    for file, weight in submissions_with_weights:\n        df = safe_load_submission(CONFIG['data_paths']['submissions'], file)\n        if df is not None:\n            loaded_subs.append((df, weight))\n    \n    if len(loaded_subs) < 2:\n        print(\"Error: Need at least 2 valid submissions for ensemble\")\n        return None\n    \n    # Convert each submission's ranks to normalized scores\n    scored_subs = []\n    for df, weight in loaded_subs:\n        temp = df.copy()\n        temp['score'] = temp.groupby('ranker_id')['selected'].transform(rank_to_score)\n        scored_subs.append((temp[['Id', 'ranker_id', 'score']], weight))\n    \n    # Merge all scored submissions with progressive merging\n    merged, base_weight = scored_subs[0]\n    for df, weight in scored_subs[1:]:\n        merged = merged.merge(df, on=['Id', 'ranker_id'], how='left', suffixes=('', f'_{len(merged.columns)}'))\n        base_weight += weight\n    \n    # Apply weights and calculate weighted average\n    score_cols = [col for col in merged.columns if col.startswith('score')]\n    weights = [w for _, w in loaded_subs]\n    merged['ensemble_score'] = merged[score_cols].mul(weights).sum(axis=1) / sum(weights)\n    \n    # Convert back to ranks\n    merged['selected'] = merged.groupby('ranker_id')['ensemble_score'].transform(score_to_rank)\n    \n    return merged[['Id', 'ranker_id', 'selected']]\n\n# ---------------------------\n# Main Execution\n# ---------------------------\n\ndef main():\n    print(\"FlightRank 2025 Hybrid Ensemble Solution\\n\")\n    \n    # 1. Create primary hybrid ensemble\n    print(\"Creating primary hybrid ensemble...\")\n    hybrid_ensemble = create_hybrid_ensemble(CONFIG['top_submissions'])\n    \n    if hybrid_ensemble is None:\n        print(\"Error: Could not create primary ensemble\")\n        return\n    \n    # 2. Create final blend with additional submissions\n    print(\"\\nCreating final optimized blend...\")\n    \n    # Load additional submissions for blending\n    blend_dfs = [hybrid_ensemble]\n    blend_weights = CONFIG['final_blend_weights'][:1]  # First weight goes to primary ensemble\n    \n    for file, weight in CONFIG['top_submissions'][1:]:\n        df = safe_load_submission(CONFIG['data_paths']['submissions'], file)\n        if df is not None and len(blend_dfs) < len(CONFIG['final_blend_weights']):\n            blend_dfs.append(df)\n            blend_weights.append(CONFIG['final_blend_weights'][len(blend_dfs)-1])\n    \n    # Convert each to scores and blend\n    scored_dfs = []\n    for i, df in enumerate(blend_dfs):\n        temp = df.copy()\n        temp['score'] = temp.groupby('ranker_id')['selected'].transform(rank_to_score)\n        scored_dfs.append(temp[['Id', 'ranker_id', 'score']].rename(columns={'score': f'score_{i}'}))\n    \n    # Progressive merging for memory efficiency\n    merged = scored_dfs[0]\n    for i in range(1, len(scored_dfs)):\n        merged = merged.merge(scored_dfs[i], on=['Id', 'ranker_id'], how='left')\n    \n    # Apply final blend weights\n    score_cols = [f'score_{i}' for i in range(len(scored_dfs))]\n    merged['final_score'] = merged[score_cols].mul(blend_weights).sum(axis=1) / sum(blend_weights)\n    \n    # Convert to final ranks\n    merged['selected'] = merged.groupby('ranker_id')['final_score'].transform(score_to_rank)\n    final_submission = merged[['Id', 'ranker_id', 'selected']]\n    \n    # 3. Validate and save\n    output_path = os.path.join(CONFIG['data_paths']['output'], 'submission.csv')\n    final_submission.to_csv(output_path, index=False)\n    print(f\"\\nSuccessfully saved optimized submission to: {output_path}\")\n    \n    # Show summary stats\n    print(\"\\nOptimized Submission Summary:\")\n    print(f\"- Rows: {len(final_submission)}\")\n    print(f\"- Unique ranker_ids: {final_submission['ranker_id'].nunique()}\")\n    print(\"- Top rank distribution:\")\n    print(final_submission['selected'].value_counts().sort_index().head(10))\n    \n    # Verify rank permutations\n    valid = True\n    for _, group in final_submission.groupby('ranker_id'):\n        ranks = group['selected'].sort_values().tolist()\n        if ranks != list(range(1, len(ranks)+1)):\n            valid = False\n            break\n    print(f\"- Valid rank permutations: {valid}\")\n\nif __name__ == \"__main__\":\n    main()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-10T12:49:39.396662Z","iopub.execute_input":"2025-08-10T12:49:39.396970Z","iopub.status.idle":"2025-08-10T12:53:35.919862Z","shell.execute_reply.started":"2025-08-10T12:49:39.396936Z","shell.execute_reply":"2025-08-10T12:53:35.913485Z"}},"outputs":[{"name":"stdout","text":"FlightRank 2025 Hybrid Ensemble Solution\n\nCreating primary hybrid ensemble...\n\nCreating final optimized blend...\n\nSuccessfully saved optimized submission to: /kaggle/working/submission.csv\n\nOptimized Submission Summary:\n- Rows: 6897776\n- Unique ranker_ids: 45231\n- Top rank distribution:\nselected\n1     45231\n2     44347\n3     43120\n4     41915\n5     41102\n6     40615\n7     39389\n8     38946\n9     38282\n10    37258\nName: count, dtype: int64\n- Valid rank permutations: True\n","output_type":"stream"}],"execution_count":1}]}