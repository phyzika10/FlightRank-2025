{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.18","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# ====================== Step 0: Setup ======================\nimport os\nimport numpy as np\nimport pandas as pd\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\n# Print input files (optional debug)\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# ====================== Step 1: Load and Explore Data ======================\ndata_path = \"/kaggle/input/aeroclub-recsys-2025/train.parquet\"\ndf = pd.read_parquet(data_path)  # ✅ Corrected the variable usage\n\nprint(\"Shape:\", df.shape)\nprint(\"Columns:\", df.columns.tolist())\nprint(df.head())\n\n# ====================== Step 2: Clean and Preprocess ======================\n\n# Fill missing values in selected categorical features\ndf['sex'] = df['sex'].fillna('unknown')\ndf['searchRoute'] = df['searchRoute'].fillna('UNKNOWN')\n\n# Drop rows with missing essential columns (target or key features)\ndf = df.dropna(subset=['selected', 'totalPrice'])  # ✅ Corrected column name\n\n# ====================== Step 3: Split Train/Test ======================\n\n# Use 'dataset' column if it exists to split\nif 'dataset' in df.columns:\n    train = df[df['dataset'] == 'train'].copy()\n    test = df[df['dataset'] == 'test'].copy()\nelse:\n    # Otherwise, do an 80/20 random split\n    from sklearn.model_selection import train_test_split\n    train, test = train_test_split(df, test_size=0.2, random_state=42)\n\nprint(\"Train size:\", train.shape)\nprint(\"Test size:\", test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-06T20:35:24.403474Z","iopub.execute_input":"2025-08-06T20:35:24.403889Z","iopub.status.idle":"2025-08-06T20:39:09.295924Z","shell.execute_reply.started":"2025-08-06T20:35:24.403861Z","shell.execute_reply":"2025-08-06T20:39:09.291523Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/aeroclub-recsys-2025/jsons_raw.tar.kaggle\n/kaggle/input/aeroclub-recsys-2025/train.parquet\n/kaggle/input/aeroclub-recsys-2025/sample_submission.parquet\n/kaggle/input/aeroclub-recsys-2025/jsons_structure.md\n/kaggle/input/aeroclub-recsys-2025/test.parquet\nShape: (18145372, 126)\nColumns: ['Id', 'bySelf', 'companyID', 'corporateTariffCode', 'frequentFlyer', 'nationality', 'isAccess3D', 'isVip', 'legs0_arrivalAt', 'legs0_departureAt', 'legs0_duration', 'legs0_segments0_aircraft_code', 'legs0_segments0_arrivalTo_airport_city_iata', 'legs0_segments0_arrivalTo_airport_iata', 'legs0_segments0_baggageAllowance_quantity', 'legs0_segments0_baggageAllowance_weightMeasurementType', 'legs0_segments0_cabinClass', 'legs0_segments0_departureFrom_airport_iata', 'legs0_segments0_duration', 'legs0_segments0_flightNumber', 'legs0_segments0_marketingCarrier_code', 'legs0_segments0_operatingCarrier_code', 'legs0_segments0_seatsAvailable', 'legs0_segments1_aircraft_code', 'legs0_segments1_arrivalTo_airport_city_iata', 'legs0_segments1_arrivalTo_airport_iata', 'legs0_segments1_baggageAllowance_quantity', 'legs0_segments1_baggageAllowance_weightMeasurementType', 'legs0_segments1_cabinClass', 'legs0_segments1_departureFrom_airport_iata', 'legs0_segments1_duration', 'legs0_segments1_flightNumber', 'legs0_segments1_marketingCarrier_code', 'legs0_segments1_operatingCarrier_code', 'legs0_segments1_seatsAvailable', 'legs0_segments2_aircraft_code', 'legs0_segments2_arrivalTo_airport_city_iata', 'legs0_segments2_arrivalTo_airport_iata', 'legs0_segments2_baggageAllowance_quantity', 'legs0_segments2_baggageAllowance_weightMeasurementType', 'legs0_segments2_cabinClass', 'legs0_segments2_departureFrom_airport_iata', 'legs0_segments2_duration', 'legs0_segments2_flightNumber', 'legs0_segments2_marketingCarrier_code', 'legs0_segments2_operatingCarrier_code', 'legs0_segments2_seatsAvailable', 'legs0_segments3_aircraft_code', 'legs0_segments3_arrivalTo_airport_city_iata', 'legs0_segments3_arrivalTo_airport_iata', 'legs0_segments3_baggageAllowance_quantity', 'legs0_segments3_baggageAllowance_weightMeasurementType', 'legs0_segments3_cabinClass', 'legs0_segments3_departureFrom_airport_iata', 'legs0_segments3_duration', 'legs0_segments3_flightNumber', 'legs0_segments3_marketingCarrier_code', 'legs0_segments3_operatingCarrier_code', 'legs0_segments3_seatsAvailable', 'legs1_arrivalAt', 'legs1_departureAt', 'legs1_duration', 'legs1_segments0_aircraft_code', 'legs1_segments0_arrivalTo_airport_city_iata', 'legs1_segments0_arrivalTo_airport_iata', 'legs1_segments0_baggageAllowance_quantity', 'legs1_segments0_baggageAllowance_weightMeasurementType', 'legs1_segments0_cabinClass', 'legs1_segments0_departureFrom_airport_iata', 'legs1_segments0_duration', 'legs1_segments0_flightNumber', 'legs1_segments0_marketingCarrier_code', 'legs1_segments0_operatingCarrier_code', 'legs1_segments0_seatsAvailable', 'legs1_segments1_aircraft_code', 'legs1_segments1_arrivalTo_airport_city_iata', 'legs1_segments1_arrivalTo_airport_iata', 'legs1_segments1_baggageAllowance_quantity', 'legs1_segments1_baggageAllowance_weightMeasurementType', 'legs1_segments1_cabinClass', 'legs1_segments1_departureFrom_airport_iata', 'legs1_segments1_duration', 'legs1_segments1_flightNumber', 'legs1_segments1_marketingCarrier_code', 'legs1_segments1_operatingCarrier_code', 'legs1_segments1_seatsAvailable', 'legs1_segments2_aircraft_code', 'legs1_segments2_arrivalTo_airport_city_iata', 'legs1_segments2_arrivalTo_airport_iata', 'legs1_segments2_baggageAllowance_quantity', 'legs1_segments2_baggageAllowance_weightMeasurementType', 'legs1_segments2_cabinClass', 'legs1_segments2_departureFrom_airport_iata', 'legs1_segments2_duration', 'legs1_segments2_flightNumber', 'legs1_segments2_marketingCarrier_code', 'legs1_segments2_operatingCarrier_code', 'legs1_segments2_seatsAvailable', 'legs1_segments3_aircraft_code', 'legs1_segments3_arrivalTo_airport_city_iata', 'legs1_segments3_arrivalTo_airport_iata', 'legs1_segments3_baggageAllowance_quantity', 'legs1_segments3_baggageAllowance_weightMeasurementType', 'legs1_segments3_cabinClass', 'legs1_segments3_departureFrom_airport_iata', 'legs1_segments3_duration', 'legs1_segments3_flightNumber', 'legs1_segments3_marketingCarrier_code', 'legs1_segments3_operatingCarrier_code', 'legs1_segments3_seatsAvailable', 'miniRules0_monetaryAmount', 'miniRules0_percentage', 'miniRules0_statusInfos', 'miniRules1_monetaryAmount', 'miniRules1_percentage', 'miniRules1_statusInfos', 'pricingInfo_isAccessTP', 'pricingInfo_passengerCount', 'profileId', 'ranker_id', 'requestDate', 'searchRoute', 'sex', 'taxes', 'totalPrice', 'selected']\n   Id  bySelf  companyID  corporateTariffCode frequentFlyer  nationality  \\\n0   0    True      57323                 <NA>      S7/SU/UT           36   \n1   1    True      57323                  123      S7/SU/UT           36   \n2   2    True      57323                 <NA>      S7/SU/UT           36   \n3   3    True      57323                  123      S7/SU/UT           36   \n4   4    True      57323                 <NA>      S7/SU/UT           36   \n\n   isAccess3D  isVip      legs0_arrivalAt    legs0_departureAt  ...  \\\n0       False  False  2024-06-15T16:20:00  2024-06-15T15:40:00  ...   \n1        True  False  2024-06-15T14:50:00  2024-06-15T09:25:00  ...   \n2       False  False  2024-06-15T14:50:00  2024-06-15T09:25:00  ...   \n3        True  False  2024-06-15T14:50:00  2024-06-15T09:25:00  ...   \n4       False  False  2024-06-15T14:50:00  2024-06-15T09:25:00  ...   \n\n  pricingInfo_isAccessTP pricingInfo_passengerCount profileId  \\\n0                    1.0                          1   2087645   \n1                    1.0                          1   2087645   \n2                    1.0                          1   2087645   \n3                    1.0                          1   2087645   \n4                    1.0                          1   2087645   \n\n                          ranker_id         requestDate    searchRoute   sex  \\\n0  98ce0dabf6964640b63079fbafd42cbe 2024-05-17 03:03:08  TLKKJA/KJATLK  True   \n1  98ce0dabf6964640b63079fbafd42cbe 2024-05-17 03:03:08  TLKKJA/KJATLK  True   \n2  98ce0dabf6964640b63079fbafd42cbe 2024-05-17 03:03:08  TLKKJA/KJATLK  True   \n3  98ce0dabf6964640b63079fbafd42cbe 2024-05-17 03:03:08  TLKKJA/KJATLK  True   \n4  98ce0dabf6964640b63079fbafd42cbe 2024-05-17 03:03:08  TLKKJA/KJATLK  True   \n\n    taxes totalPrice selected  \n0   370.0    16884.0        1  \n1  2240.0    51125.0        0  \n2  2240.0    53695.0        0  \n3  2240.0    81880.0        0  \n4  2240.0    86070.0        0  \n\n[5 rows x 126 columns]\nTrain size: (14516297, 126)\nTest size: (3629075, 126)\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import GroupKFold\n\n# Load data\ntrain = pd.read_parquet(\"/kaggle/input/aeroclub-recsys-2025/train.parquet\")\ntest = pd.read_parquet(\"/kaggle/input/aeroclub-recsys-2025/test.parquet\")\n\n# Feature engineering\n# Convert timestamps to datetime\ntrain[\"legs0_departureAt\"] = pd.to_datetime(train[\"legs0_departureAt\"])\ntrain[\"legs0_arrivalAt\"] = pd.to_datetime(train[\"legs0_arrivalAt\"])\n\n# Time-based features\ntrain[\"departure_hour\"] = train[\"legs0_departureAt\"].dt.hour\ntrain[\"is_weekend\"] = train[\"legs0_departureAt\"].dt.weekday >= 5\ntrain[\"overnight_flight\"] = (train[\"legs0_arrivalAt\"].dt.day > train[\"legs0_departureAt\"].dt.day).astype(int)\n\n# Price normalization\ntrain[\"price_relative_to_avg\"] = train.groupby(\"searchRoute\")[\"totalPrice\"].transform(lambda x: x / x.mean())\n\n# Frequent flyer impact\ntrain[\"is_frequent_flyer\"] = train[\"frequentFlyer\"].notna().astype(int)\n\n# Corporate traveler flag\ntrain[\"is_corporate\"] = train[\"corporateTariffCode\"].notna().astype(int)\n\n# Number of options per search session\ntrain[\"num_options_in_session\"] = train.groupby(\"ranker_id\")[\"Id\"].transform(\"count\")\n\n# Route popularity (total searches)\ntrain[\"route_popularity\"] = train.groupby(\"searchRoute\")[\"ranker_id\"].transform(\"nunique\")\n\n# GroupKFold for validation\ngkf = GroupKFold(n_splits=5)\nfor train_idx, val_idx in gkf.split(train, groups=train[\"ranker_id\"]):\n    X_train, X_val = train.iloc[train_idx], train.iloc[val_idx]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-06T20:39:09.298111Z","iopub.execute_input":"2025-08-06T20:39:09.298576Z","iopub.status.idle":"2025-08-06T20:41:21.551182Z","shell.execute_reply.started":"2025-08-06T20:39:09.298546Z","shell.execute_reply":"2025-08-06T20:41:21.547038Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"import os\n!pip install --force-reinstall lightgbm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-06T20:41:21.553519Z","iopub.execute_input":"2025-08-06T20:41:21.553760Z","iopub.status.idle":"2025-08-06T20:41:32.405611Z","shell.execute_reply.started":"2025-08-06T20:41:21.553723Z","shell.execute_reply":"2025-08-06T20:41:32.401017Z"}},"outputs":[{"name":"stdout","text":"Collecting lightgbm\n  Using cached lightgbm-4.6.0-py3-none-manylinux_2_28_x86_64.whl.metadata (17 kB)\nCollecting numpy>=1.17.0 (from lightgbm)\n  Using cached numpy-2.2.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (62 kB)\nCollecting scipy (from lightgbm)\n  Using cached scipy-1.15.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (61 kB)\nUsing cached lightgbm-4.6.0-py3-none-manylinux_2_28_x86_64.whl (3.6 MB)\nUsing cached numpy-2.2.6-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (16.8 MB)\nUsing cached scipy-1.15.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (37.7 MB)\nInstalling collected packages: numpy, scipy, lightgbm\n\u001b[2K  Attempting uninstall: numpy\n\u001b[2K    Found existing installation: numpy 2.2.6\n\u001b[2K    Uninstalling numpy-2.2.6:\n\u001b[2K      Successfully uninstalled numpy-2.2.6\n\u001b[2K  Attempting uninstall: scipy━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0/3\u001b[0m [numpy]\n\u001b[2K    Found existing installation: scipy 1.15.3[0m \u001b[32m0/3\u001b[0m [numpy]\n\u001b[2K    Uninstalling scipy-1.15.3:━━━━━━━━━━━━━━\u001b[0m \u001b[32m0/3\u001b[0m [numpy]\n\u001b[2K      Successfully uninstalled scipy-1.15.3━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1/3\u001b[0m [scipy]\n\u001b[2K  Attempting uninstall: lightgbm[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1/3\u001b[0m [scipy]\n\u001b[2K    Found existing installation: lightgbm 4.6.0━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1/3\u001b[0m [scipy]\n\u001b[2K    Uninstalling lightgbm-4.6.0:[90m━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1/3\u001b[0m [scipy]\n\u001b[2K      Successfully uninstalled lightgbm-4.6.0━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1/3\u001b[0m [scipy]\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3/3\u001b[0m [lightgbm]2/3\u001b[0m [lightgbm]\n\u001b[1A\u001b[2K\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\ntensorflow 2.18.1 requires numpy<2.1.0,>=1.26.0, but you have numpy 2.2.6 which is incompatible.\ntensorflow-tpu 2.18.0 requires numpy<2.1.0,>=1.26.0, but you have numpy 2.2.6 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed lightgbm-4.6.0 numpy-2.2.6 scipy-1.15.3\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.\u001b[0m\u001b[33m\n\u001b[0m","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"try:\n    import lightgbm as lgb\n    print(f\"Success! LightGBM version: {lgb.__version__}\")\nexcept Exception as e:\n    print(f\"Failed to import LightGBM: {e}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-06T20:41:32.407039Z","iopub.execute_input":"2025-08-06T20:41:32.407296Z","iopub.status.idle":"2025-08-06T20:41:32.417778Z","shell.execute_reply.started":"2025-08-06T20:41:32.407273Z","shell.execute_reply":"2025-08-06T20:41:32.413394Z"}},"outputs":[{"name":"stdout","text":"Success! LightGBM version: 4.6.0\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"# Install XGBoost\n!pip install xgboost --quiet\n\nimport pandas as pd\nimport numpy as np\nfrom xgboost import XGBRanker\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.preprocessing import LabelEncoder\n\n# --- Load Data ---\ntrain = pd.read_parquet(\"/kaggle/input/aeroclub-recsys-2025/train.parquet\")\ntest = pd.read_parquet(\"/kaggle/input/aeroclub-recsys-2025/test.parquet\")\n\n# --- Data Preprocessing ---\n# Convert ISO duration to minutes\ndef parse_duration(duration_str):\n    \"\"\"Convert ISO 8601 duration to total minutes\"\"\"\n    if pd.isna(duration_str) or duration_str == \"\":\n        return 0.0\n    hours = 0\n    minutes = 0\n    if 'H' in duration_str:\n        hours = int(duration_str.split('H')[0].split('T')[-1])\n    if 'M' in duration_str:\n        minutes_part = duration_str.split('H')[-1] if 'H' in duration_str else duration_str.split('T')[-1]\n        minutes = int(minutes_part.replace('M', ''))\n    return hours * 60 + minutes\n\n# Apply to all duration columns\nduration_cols = [col for col in train.columns if 'duration' in col]\nfor col in duration_cols:\n    train[col] = train[col].apply(parse_duration)\n    test[col] = test[col].apply(parse_duration)\n\n# --- Feature Engineering ---\n# Time features\ntrain[\"departure_hour\"] = pd.to_datetime(train[\"legs0_departureAt\"]).dt.hour\ntest[\"departure_hour\"] = pd.to_datetime(test[\"legs0_departureAt\"]).dt.hour\n\n# Business features\ntrain[\"is_corporate\"] = train[\"corporateTariffCode\"].notna().astype(int)\ntest[\"is_corporate\"] = test[\"corporateTariffCode\"].notna().astype(int)\n\n# User features\ntrain[\"is_vip\"] = train[\"isVip\"].astype(int)\ntest[\"is_vip\"] = test[\"isVip\"].astype(int)\ntrain[\"frequent_flyer\"] = train[\"frequentFlyer\"].notna().astype(int)\ntest[\"frequent_flyer\"] = test[\"frequentFlyer\"].notna().astype(int)\n\n# Price features\ntrain[\"price_per_minute\"] = train[\"totalPrice\"] / (train[\"legs0_duration\"] + 1)\ntest[\"price_per_minute\"] = test[\"totalPrice\"] / (test[\"legs0_duration\"] + 1)\n\n# Categorical encoding\nfor col in [\"legs0_segments0_marketingCarrier_code\", \"searchRoute\"]:\n    le = LabelEncoder()\n    le.fit(pd.concat([train[col], test[col]]))\n    train[f\"{col}_encoded\"] = le.transform(train[col])\n    test[f\"{col}_encoded\"] = le.transform(test[col])\n\n# --- Define Features ---\nfeatures = [\n    \"totalPrice\", \"legs0_duration\", \"departure_hour\", \n    \"is_corporate\", \"is_vip\", \"frequent_flyer\",\n    \"price_per_minute\", \"legs0_segments0_marketingCarrier_code_encoded\",\n    \"searchRoute_encoded\"\n]\n\n# --- Prepare Data for Ranking ---\n# Group info for training\ntrain_group_sizes = train.groupby(\"ranker_id\").size().values\nX_train = train[features]\ny_train = train[\"selected\"]\n\n# --- Train XGBoost Ranker ---\nmodel = XGBRanker(\n    objective=\"rank:ndcg\",\n    learning_rate=0.05,\n    n_estimators=100,\n    random_state=42\n)\n\nmodel.fit(\n    X_train, \n    y_train,\n    group=train_group_sizes,\n    verbose=True\n)\n\n# --- Generate Predictions ---\ntest[\"pred_score\"] = model.predict(test[features])\n\n# --- Create Rankings ---\n# Convert scores to ranks (1 = best) within each search session\ntest[\"rank\"] = test.groupby(\"ranker_id\")[\"pred_score\"].rank(\n    method=\"dense\", \n    ascending=False\n).astype(int)\n\n# --- Prepare Submission ---\nsubmission = test[[\"Id\", \"ranker_id\", \"rank\"]].rename(columns={\"rank\": \"selected\"})\nsubmission.to_csv(\"submission.csv\", index=False)\n\nprint(\"Submission file created successfully!\")\nprint(f\"Submission shape: {submission.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-06T22:16:05.466550Z","iopub.execute_input":"2025-08-06T22:16:05.466960Z","iopub.status.idle":"2025-08-06T22:20:36.329731Z","shell.execute_reply.started":"2025-08-06T22:16:05.466931Z","shell.execute_reply":"2025-08-06T22:20:36.325923Z"}},"outputs":[{"name":"stdout","text":"\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\n\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.0.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m25.2\u001b[0m\n\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\nSubmission file created successfully!\nSubmission shape: (6897776, 3)\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"test[\"pred_score\"] = model.predict(test[features])\n\n# Convert scores to ranks within each ranker_id\ntest[\"rank\"] = test.groupby(\"ranker_id\")[\"pred_score\"].rank(ascending=False, method=\"first\").astype(int)\n\n# Ensure valid permutations (1, 2, 3, ..., N per group)\nassert test.groupby(\"ranker_id\")[\"rank\"].nunique().eq(test.groupby(\"ranker_id\").size()).all()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-06T22:21:38.550848Z","iopub.execute_input":"2025-08-06T22:21:38.551229Z","iopub.status.idle":"2025-08-06T22:21:43.829562Z","shell.execute_reply.started":"2025-08-06T22:21:38.551199Z","shell.execute_reply":"2025-08-06T22:21:43.823595Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"submission = test[[\"Id\", \"ranker_id\", \"rank\"]].rename(columns={\"rank\": \"selected\"})\nsubmission.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-06T22:21:14.325403Z","iopub.execute_input":"2025-08-06T22:21:14.325782Z","iopub.status.idle":"2025-08-06T22:21:27.220074Z","shell.execute_reply.started":"2025-08-06T22:21:14.325753Z","shell.execute_reply":"2025-08-06T22:21:27.214624Z"}},"outputs":[],"execution_count":4}]}